window.PorqueParser = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { Lenguaje: peg$parseLenguaje },
        peg$startRuleFunction  = peg$parseLenguaje,

        peg$c0 = function(s) {return Object.assign({}, new Memoria().procesar(s));},
        peg$c1 = function(s) {return s},
        peg$c2 = function(s) {return {...s, todosLosSucesos: listarSucesosDeSentencia(s), texto: text(), localizacion: location()}},
        peg$c3 = "\xBFpor qu\xE9 ",
        peg$c4 = peg$literalExpectation("\xBFpor qu\xE9 ", false),
        peg$c5 = "?",
        peg$c6 = peg$literalExpectation("?", false),
        peg$c7 = function(op, suceso) {return {tipo:"pregunta",suceso, operador: op.trim() + "?"}},
        peg$c8 = "\xBF",
        peg$c9 = peg$literalExpectation("\xBF", false),
        peg$c10 = "es cierto que ",
        peg$c11 = peg$literalExpectation("es cierto que ", false),
        peg$c12 = "es falso que ",
        peg$c13 = peg$literalExpectation("es falso que ", false),
        peg$c14 = ".",
        peg$c15 = peg$literalExpectation(".", false),
        peg$c16 = function(subtipo, suceso) {return {tipo:"afirmaciÃ³n",subtipo:subtipo.trim(),suceso}},
        peg$c17 = " porque ",
        peg$c18 = peg$literalExpectation(" porque ", false),
        peg$c19 = " en tanto que ",
        peg$c20 = peg$literalExpectation(" en tanto que ", false),
        peg$c21 = function(consecuencia, causa) {return {tipo:"causalidad",causa,consecuencia}},
        peg$c22 = "si ",
        peg$c23 = peg$literalExpectation("si ", false),
        peg$c24 = " entonces ",
        peg$c25 = peg$literalExpectation(" entonces ", false),
        peg$c26 = function(causa, consecuencia) {return {tipo:"causalidad",causa,consecuencia}},
        peg$c27 = " es porque ",
        peg$c28 = peg$literalExpectation(" es porque ", false),
        peg$c29 = function(suceso, concatenaciones) {return {tipo:"suceso concatenado",concatenaciones: [suceso].concat(concatenaciones), texto: text(), localizacion: location()}},
        peg$c30 = " y ",
        peg$c31 = peg$literalExpectation(" y ", false),
        peg$c32 = " o ",
        peg$c33 = peg$literalExpectation(" o ", false),
        peg$c34 = function(op, suceso) {return {operador:op.trim(), ...suceso}},
        peg$c35 = "(",
        peg$c36 = peg$literalExpectation("(", false),
        peg$c37 = ")",
        peg$c38 = peg$literalExpectation(")", false),
        peg$c39 = function(n, s) {return {...s,negacion:n?n.length:0}},
        peg$c40 = "no ",
        peg$c41 = peg$literalExpectation("no ", false),
        peg$c42 = "{",
        peg$c43 = peg$literalExpectation("{", false),
        peg$c44 = /^[^}]/,
        peg$c45 = peg$classExpectation(["}"], true, false),
        peg$c46 = "}",
        peg$c47 = peg$literalExpectation("}", false),
        peg$c48 = function() {return {tipo:"suceso puro",texto:text().substr(1, text().length-2).trim()}},
        peg$c49 = "\n",
        peg$c50 = peg$literalExpectation("\n", false),
        peg$c51 = "\r\n",
        peg$c52 = peg$literalExpectation("\r\n", false),
        peg$c53 = peg$anyExpectation(),

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseLenguaje() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseSentencia_completa();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseSentencia_completa();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSentencia_completa() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSentencia();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEOS();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseSentencia() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsesentencia_es_cierto_que();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesentencia_pregunta_por_que();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesentencia_pregunta();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesentencia_porque();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c2(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesentencia_pregunta_por_que() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9) === peg$c3) {
        s1 = peg$c3;
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso_negado();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesentencia_pregunta() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 191) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 63) {
            s3 = peg$c5;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c7(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesentencia_es_cierto_que() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 13) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 13;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c13); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso_grupal();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesentencia_porque() {
      var s0;

      s0 = peg$parsesentencia_porque_1();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesentencia_porque_2();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesentencia_porque_3();
        }
      }

      return s0;
    }

    function peg$parsesentencia_porque_1() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsesuceso_grupal();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c17) {
          s2 = peg$c17;
          peg$currPos += 8;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c18); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 14) === peg$c19) {
            s2 = peg$c19;
            peg$currPos += 14;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesuceso();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s4 = peg$c14;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c21(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesentencia_porque_2() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c24) {
            s3 = peg$c24;
            peg$currPos += 10;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesuceso_grupal();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesentencia_porque_3() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c22) {
        s1 = peg$c22;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso_grupal();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 11) === peg$c27) {
            s3 = peg$c27;
            peg$currPos += 11;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesuceso();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c21(s2, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesuceso() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsesuceso_concatenado();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesuceso_grupal();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c1(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesuceso_concatenado() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsesuceso_grupal();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso_concatenaciones();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c29(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesuceso_concatenaciones() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsesuceso_concatenacion();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsesuceso_concatenacion();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesuceso_concatenacion() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c30) {
        s1 = peg$c30;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c32) {
          s1 = peg$c32;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesuceso_grupal() {
      var s0;

      s0 = peg$parsesuceso_agrupado();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesuceso_negado();
      }

      return s0;
    }

    function peg$parsesuceso_agrupado() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenegacion();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenegacion();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c35;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesuceso();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c37;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c38); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c39(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesuceso_negado() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsenegacion();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenegacion();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesuceso_puro();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenegacion() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c41); }
      }

      return s0;
    }

    function peg$parsesuceso_puro() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c42;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c43); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c44.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c45); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c44.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c45); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c46;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c48();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c49;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c50); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c51) {
          s0 = peg$c51;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c52); }
        }
      }

      return s0;
    }

    function peg$parseEOS() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseEOL();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseEOL();
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c53); }
        }
        peg$silentFails--;
        if (s1 === peg$FAILED) {
          s0 = void 0;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }



      class Incongruencia extends Error {
        constructor(message) {
          super();
          this.name = "IncongruencyError";
          this.message = message;
        }
      }
      class Memoria {
        constructor() {
          this.sucesos = {};
          this.relaciones = {};
          this.relacionesPorSuceso = {};
        }
        procesar(pSentencias = []) {
          try {
            const sentencias = [].concat(pSentencias);
            return sentencias.map(sentencia => {
              if(sentencia.tipo === "afirmaciÃ³n") {
                return this.asignar(sentencia.suceso, sentencia.subtipo, sentencia);
              } else if(sentencia.tipo === "pregunta") {
                return this.cuestionar(sentencia);
              } else if(sentencia.tipo === "causalidad") {
                return this.causalizar(sentencia);
              }
            }).map((resultado, indiceSentencia) => {
              const sentencia = typeof sentencias[indiceSentencia].texto === "string" ? sentencias[indiceSentencia].texto.replace(/\.$/g, "") : sentencias[indiceSentencia].texto;
              return {pregunta:sentencia, respuesta:resultado};
            });
          } catch(error) {
            throw error;
          }
        }
        asignar(suceso, subtipo = "es cierto que", sentencia) {
          const { texto, localizacion, negacion } = suceso;
          const idSuceso = suceso.texto;
          const valor = (subtipo === "es cierto que") ? negacion % 2 === 0 : negacion % 2 !== 0;
          if((!(idSuceso in this.sucesos)) || (this.sucesos[idSuceso] === undefined)) {
            this.sucesos[idSuceso] = valor;
            this.propagar(suceso);
            return "De acuerdo, esto es nueva informaciÃ³n para mÃ­";
          } else if(this.sucesos[idSuceso] === valor) {
            this.sucesos[idSuceso] = valor; // redundancia!
            return "De acuerdo, aunque esto ya lo sabÃ­a";
          } else if(this.sucesos[idSuceso] !== valor) {
            return "Error de incongruencia: " + "el suceso " + idSuceso + " no puede ser reasignado a " + valor + " cuando ya era " +  this.sucesos[idSuceso]  + ". Error [" + sentencia.localizacion.start.line + ":" + sentencia.localizacion.start.column + "]. Sentencia: " + sentencia.texto + "";
            // throw new Incongruencia("Suceso " + idSuceso + " no puede ser reasignado a " + valor + " cuando ya era " +  this.sucesos[idSuceso]  + ". Error [" + localizacion.start.line + ":" + localizacion.start.column + "]. Sentencia: " + sentencia.texto + "");
          }
          throw new Error("Esto es un error del programador/diseÃ±ador...");
        }
        causalizar(sentencia) {
          const { causa, consecuencia, texto, localizacion } = sentencia;
          const resultadoCausa = this.resolver(causa);
          this.relaciones[sentencia.texto] = sentencia; // registramos la relaciÃ³n
          if(resultadoCausa === true) {
            return this.asignar(consecuencia, "es cierto que", sentencia);
          } else if(resultadoCausa === false) {
            return this.asignar(consecuencia, "es falso que", sentencia);
          } else {
            return "De acuerdo, aunque todavÃ­a no podemos demostrarlo.";
          }
        }
        cuestionar(sentencia) {
          const { operador, suceso = null, texto, localizacion } = sentencia;
          const { texto: idSuceso = null } = suceso;
          if(operador === "Â¿?") {
            const resultadoSuceso = this.resolver(suceso);
            const esNegacion = suceso.negacion % 2 === 0 ? "" : " no"
            if(resultadoSuceso === true) {
              return `Correcto, es verdad que${esNegacion} ${suceso.texto}.`;
            } else if(resultadoSuceso === false) {
              return `Incorrecto, es falso que${esNegacion} ${suceso.texto}.`;
            } else {
              return `TodavÃ­a no se sabe si${esNegacion} ${suceso.texto}.`;
            }
          } else if(operador === "Â¿por quÃ©?") {
            const resultadoSuceso = this.resolver(suceso);
            if(typeof resultadoSuceso === "boolean") {
              if(resultadoSuceso === true) {
                // La aseveraciÃ³n es correcta:
                let porques = "";
                let haEmpezado = false;
                Object.keys(this.relaciones).forEach(idRelacion => {
                  const relacion = this.relaciones[idRelacion];
                  const contieneSuceso = relacion.todosLosSucesos.indexOf(suceso.texto) !== -1;
                  if(contieneSuceso) {
                    const resultados = this.procesar(relacion);
                    if(haEmpezado) {
                      porques += "\n...y porque " + resultados.map(resultado => resultado.pregunta).join("\n...y porque");
                    } else {
                      haEmpezado = true;
                      porques += "Porque, como ya has dicho, " + resultados.map(resultado => resultado.pregunta).join("\n...y porque");
                    }
                    return porques;
                  }
                });
                return porques;
              } else if(resultadoSuceso === false) {
                // La aseveraciÃ³n es incorrecta:
                return `Erras al afirmar que ${suceso.texto} es ${suceso.negacion % 2 === 0 ? "verdad" : "falso"} porque en realidad es ${this.sucesos[suceso.texto] ? "verdad" : "falso"}.`;
              }
            } else {
              // La aseveraciÃ³n es indeterminada:
              return `Tu pregunta parte de una premisa indeterminada porque todavÃ­a no se sabe si ${suceso.texto} o no.`
            }
          }
          return operador;
        }
        resolver(suceso) {
          if(suceso.tipo === "suceso puro") {
            const esNegacion = suceso.negacion % 2 !== 0;
            const estaResuelto = typeof this.sucesos[suceso.texto] === "boolean";
            if(estaResuelto) {
              if(esNegacion) {
                return this.sucesos[suceso.texto] === false;
              } else {
                return this.sucesos[suceso.texto] === true;
              }
            } else {
              return undefined;
            }
          } else if(suceso.tipo === "suceso concatenado") {
            let resultado = true;
            suceso.concatenaciones.forEach((concatenacion, indiceConcatenacion) => {
              if(indiceConcatenacion !== 0)  {
                const resultadoConcatenacion = this.resolver(concatenacion);
                const estaResueltaConcatenacion = typeof resultadoConcatenacion === "boolean";
                const estaResueltoResultado = typeof resultado === "boolean";
                // DET Y|O DET
                if(estaResueltoResultado && estaResueltaConcatenacion) {
                  if(concatenacion.operador === "y") {
                    resultado = resultado && resultadoConcatenacion;
                  } else if(concatenacion.operador === "o") {
                    resultado = resultado || resultadoConcatenacion;
                  }
                // DET Y UNDET | UNDET Y DET | UNDET Y UNDET
                } else if(suceso.operador === "y" && (!(estaResueltoResultado && estaResueltaConcatenacion))) {
                  resultado = undefined;
                // DET O UNDET | UNDET O DET | UNDET O UNDET
                } else if(suceso.operador === "o" && (!(estaResueltoResultado && estaResueltaConcatenacion))) {
                  resultado = resultado || resultadoConcatenacion;
                }
              } else {
                resultado = resultado && this.resolver(concatenacion);
              }
            });
            return resultado;
          }
        }
        propagar(suceso) {
          // Coger todas las relaciones que tengan a este suceso en todosLosSucesos
          return Object.keys(this.relaciones).filter(relacion => {
            return this.relaciones[relacion].todosLosSucesos.indexOf(suceso.texto) !== -1;
          }).map(relacion => {
            return this.procesar(this.relaciones[relacion]);
          });
        }
        get frases() {
          return {
            "no lo sabÃ­a": ["Perfecto, no lo sabÃ­a."],
            "lo sÃ©": ["SÃ­, es cierto."]
          }
        }
        frase(mensaje) {
          return this.frases[mensaje][0];
        }
      }
      const listarSucesosDeSuceso = function(suceso) {
        const sucesos = [];
        const insertarSuceso = function(suceso) {
          if(suceso.tipo === "suceso puro" && sucesos.indexOf(suceso.texto) === -1) {
            sucesos.push(suceso.texto);
          }
          if(suceso.concatenaciones) {
            insertarSucesosDeConcatenaciones(suceso.concatenaciones);
          }
        };
        const insertarSucesosDeConcatenaciones = function(concatenaciones) {
          concatenaciones.forEach(function(concatenacion) {
            insertarSuceso(concatenacion);
          });
        };
        insertarSuceso(suceso);
        return sucesos;
      };
      const listarSucesosDeSentencia = function(sentencia) {
          if(sentencia.tipo === "afirmaciÃ³n") {
            let { suceso } = sentencia;
            return listarSucesosDeSuceso(suceso);
          } else if(sentencia.tipo === "pregunta") {
            let { suceso } = sentencia;
            return listarSucesosDeSuceso(suceso);
          } else if(sentencia.tipo === "causalidad") {
            let { causa, consecuencia } = sentencia;
            causa = {...causa, todosLosSucesos: listarSucesosDeSuceso(causa) };
            consecuencia = {...consecuencia, todosLosSucesos: listarSucesosDeSuceso(consecuencia) };
            let result = [];
            causa.todosLosSucesos.forEach(s => result.indexOf(s) === -1 && result.push(s));
            consecuencia.todosLosSucesos.forEach(s => result.indexOf(s) === -1 && result.push(s));
            return result;
          }
      };
      const sucesos = {};
      const relaciones = {};


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
